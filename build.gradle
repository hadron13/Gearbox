plugins {
    id "idea"
    id "eclipse"
    id "maven-publish"
    id "net.neoforged.moddev.legacyforge" version "2.0.74"
    id "dev.ithundxr.silk" version "0.11.15"
    id "net.kyori.blossom" version "2.1.0" // https://github.com/KyoriPowered/blossom
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.8" // https://github.com/JetBrains/gradle-idea-ext-plugin
}

apply from: "./gradle/java.gradle"
apply from: "gradle/property_loader.gradle"

def archiveBaseName
base {
    version = mod_version
    group = 'io.github.hadron13.gearbox' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
    archivesName = "gearbox-${artifact_minecraft_version}"
    archiveBaseName = archivesName
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

//def refmap
mixin {
    //refmap = add sourceSets.main, 'gearbox.refmap.json'
    config 'gearbox.mixins.json'
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

legacyForge {
    version = "$minecraft_version-$forge_version"


    validateAccessTransformers = false

    if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
        accessTransformers.from "src/main/resources/META-INF/accesstransformer.cfg"
    }

    parchment {
        minecraftVersion = minecraft_version
        mappingsVersion = parchment_version
    }
    mods {
        gearbox {
            sourceSet sourceSets.main
        }
    }

    runs {
        configureEach {
            systemProperty 'forge.logging.markers', ''
            systemProperty 'forge.logging.console.level', 'info'
            jvmArguments = ["-XX:+IgnoreUnrecognizedVMOptions", "-XX:+AllowEnhancedClassRedefinition"]

            systemProperty 'mixin.debug.export', 'true'
            systemProperty 'mixin.debug.verbose', 'true'
            programArgument '-mixin.config=gearbox.mixins.json'
        }
        client {
            client()
            gameDirectory = project.file('run')
        }

        server {
            server()

            gameDirectory = project.file('run/server')
        }

        gameTestServer {
            type = "gameTestServer"

            gameDirectory = project.file('run/gametest')
        }

        data {
            data()

            gameDirectory = project.file('run')
            systemProperty 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP'
            systemProperty 'forge.logging.console.level', 'debug'
            programArguments.addAll("--mod", mod_id as String, "--all", "--output", file("src/generated/resources/").getAbsolutePath(), "--existing", file("src/main/resources").getAbsolutePath())
        }
    }
}


repositories {
    maven { url = "https://maven.createmod.net" } // Create, Ponder, Flywheel
    maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" } // ForgeConfigAPIPort
    maven { url = "https://maven.tterrag.com" } // Registrate
    maven { url = "https://maven.blamejared.com" } // JEI, Vazkii's Mods
    maven {
        //location of the maven for curios api
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        // Shedaniel's maven (Architectury API)
        url = "https://maven.architectury.dev"
        content {
            includeGroup "dev.architectury"
        }
    }
    maven {
        // saps.dev Maven (KubeJS and Rhino)
        url = "https://maven.saps.dev/minecraft"
        content {
            includeGroup "dev.latvian.mods"
        }
    }
}

dependencies {
    implementation 'org.jetbrains:annotations:22.0.0'

    modImplementation("com.tterrag.registrate:Registrate:${registrate_version}")

    implementation(jarJar("io.github.llamalad7:mixinextras-forge:${mixin_extras_version}"))

    modImplementation("com.simibubi.create:create-${minecraft_version}:${create_version}:slim") { transitive = false }
    modCompileOnly("dev.engine-room.flywheel:flywheel-forge-api-${flywheel_minecraft_version}:${flywheel_version}")
    modRuntimeOnly("dev.engine-room.flywheel:flywheel-forge-${flywheel_minecraft_version}:${flywheel_version}")
    modImplementation("net.createmod.ponder:Ponder-Forge-${minecraft_version}:${ponder_version}")

    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:${mixin_extras_version}"))

    modCompileOnly("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}") { transitive = false }
    modCompileOnly("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}") { transitive = false }
    modCompileOnly("mezz.jei:jei-${minecraft_version}-forge:${jei_version}") { transitive = false }
    modRuntimeOnly("mezz.jei:jei-${minecraft_version}-forge:${jei_version}") { transitive = false }


    modImplementation("dev.latvian.mods:kubejs-forge:${kubejs_version}")
    modImplementation("dev.latvian.mods:rhino-forge:${rhino_version}")
    modImplementation("dev.architectury:architectury-forge:${architectury_version}")
//    implementation fg.deobf("dev.latvian.mods:kubejs-create-forge:${kubejs_create_version}")

    //compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_minecraft_version}-${curios_version}:api")
    //runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_minecraft_version}-${curios_version}")

    if (System.getProperty('idea.sync.active') != 'true') {
        annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
    }
}

// Include resources generated by data generators.
sourceSets.main {
    //java {

    //}

    resources {
        srcDir 'src/generated/resources'
        exclude '.cache/'
    }

    blossom.javaSources {
        property("version", build_info_mod_version)
    }
}

processResources {
    def buildProps = project.properties.clone()

    // Replaces FML's magic file.jarVersion string with the correct version at build time.
    buildProps.put('file', [jarVersion: project.version])

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand buildProps
    }
}

compileJava {
    options.compilerArgs = ['-Xdiags:verbose']
}

jar {
    from('LICENSE') {
        rename { "${it}_${archiveBaseName}" }
    }

    manifest.attributes([
            "MixinConfigs": "gearbox.mixins.json"
    ])
}


final slimJar = tasks.register("slimJar", Jar) {
    archiveClassifier = "slim"
    from(sourceSets.main.output)
    //from(refmap)
    manifest.attributes([
            "MixinConfigs": "gearbox.mixins.json"
    ])
}
obfuscation.reobfuscate(slimJar, sourceSets.main)

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}
